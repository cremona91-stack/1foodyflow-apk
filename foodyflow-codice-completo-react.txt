=== FOODYFLOW - CODICE COMPLETO REACT COMPONENTS ===
Data: 19 Settembre 2025
Descrizione: Sistema completo di gestione ristorante con React + TypeScript

=====================================================
=== 1. BUDGET COMPONENT ===
=====================================================

// File: client/src/components/Budget.tsx
import { useState, useMemo, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Calendar, Plus, Download, TrendingUp, TrendingDown, Save } from "lucide-react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import type { BudgetEntry, InsertBudgetEntry, UpdateBudgetEntry, EconomicParameters, UpdateEconomicParameters } from "@shared/schema";

interface BudgetProps {}

export default function Budget({}: BudgetProps) {
  const queryClient = useQueryClient();
  const [selectedYear, setSelectedYear] = useState<number>(2026);
  const [selectedMonth, setSelectedMonth] = useState<number>(1);
  const [editingEntry, setEditingEntry] = useState<string | null>(null);
  const [editForm, setEditForm] = useState<Partial<UpdateBudgetEntry>>({});
  const [ecoEditingField, setEcoEditingField] = useState<keyof UpdateEconomicParameters | null>(null);
  const [ecoTempValue, setEcoTempValue] = useState<string>("");

  // Fetch budget entries for selected month/year
  const { data: budgetEntries = [], isLoading } = useQuery({
    queryKey: ['/api/budget-entries', selectedYear, selectedMonth],
    queryFn: () => 
      fetch(`/api/budget-entries/${selectedYear}/${selectedMonth}`)
        .then(res => res.json()) as Promise<BudgetEntry[]>
  });

  // Create economic parameters mutation (for defaults)
  const createEcoParamsMutation = useMutation({
    mutationFn: async (params: UpdateEconomicParameters & { year: number; month: number }) => {
      const response = await apiRequest('POST', '/api/economic-parameters', params);
      return response as unknown as EconomicParameters;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/economic-parameters', selectedYear, selectedMonth] });
    },
  });

  // Fetch economic parameters for selected month/year (no side-effects)
  const { data: ecoParams, error: ecoParamsError } = useQuery({
    queryKey: ['/api/economic-parameters', selectedYear, selectedMonth],
    queryFn: async () => {
      const response = await fetch(`/api/economic-parameters/${selectedYear}/${selectedMonth}`);
      if (!response.ok) {
        const error = new Error(`Failed to fetch: ${response.status}`);
        (error as any).status = response.status;
        throw error;
      }
      return response.json() as Promise<EconomicParameters>;
    },
    retry: false, // Don't retry on 404
  });

  // Handle 404 errors by creating default parameters (side-effect free)
  const [defaultsCreated, setDefaultsCreated] = useState(false);
  
  // Reset defaultsCreated when period changes
  useEffect(() => {
    setDefaultsCreated(false);
  }, [selectedYear, selectedMonth]);

  useEffect(() => {
    if ((ecoParamsError as any)?.status === 404 && !defaultsCreated) {
      const defaultParams: UpdateEconomicParameters = {
        materieFirstePercent: 22.10,
        acquistiVarPercent: 3.00,
        locazioniBudget: 0,
        personaleBudget: 0,
        utenzeBudget: 0,
        manutenzionibudget: 0,
        noleggibudget: 0,
        prestazioniTerziBudget: 0,
        consulenzeBudget: 0,
        marketingBudget: 0,
        deliveryBudget: 0,
        trasferteBudget: 0,
        assicurazioniBudget: 0,
        speseBancarieBudget: 0,
      };
      createEcoParamsMutation.mutate({ ...defaultParams, year: selectedYear, month: selectedMonth });
      setDefaultsCreated(true);
    }
  }, [ecoParamsError, selectedYear, selectedMonth, defaultsCreated, createEcoParamsMutation]);

  // Create/update mutations
  const createMutation = useMutation({
    mutationFn: (data: InsertBudgetEntry) => apiRequest('POST', '/api/budget-entries', data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/budget-entries', selectedYear, selectedMonth] });
    },
  });

  // Economic parameters update mutation
  const updateEcoParamsMutation = useMutation({
    mutationFn: (data: UpdateEconomicParameters) => 
      apiRequest('PUT', `/api/economic-parameters/${selectedYear}/${selectedMonth}`, data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/economic-parameters', selectedYear, selectedMonth] });
    },
  });

  const updateMutation = useMutation({
    mutationFn: ({ id, data }: { id: string; data: UpdateBudgetEntry }) => 
      apiRequest('PUT', `/api/budget-entries/${id}`, data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/budget-entries', selectedYear, selectedMonth] });
      setEditingEntry(null);
      setEditForm({});
    },
  });

  // Handle editing economic parameters - distinguish between percentage and budget fields
  const handleEcoEdit = (field: keyof UpdateEconomicParameters, currentValue: number, isPercentageField: boolean = false) => {
    setEcoEditingField(field);
    if (isPercentageField) {
      // For percentage fields (materie prime, acquisti vari), edit as percentage
      setEcoTempValue(currentValue.toString().replace('.', ','));
    } else {
      // For budget fields, edit as absolute euro value
      setEcoTempValue(currentValue.toString().replace('.', ','));
    }
  };

  const handleEcoSave = (field: keyof UpdateEconomicParameters) => {
    if (!ecoParams) return;
    
    const numValue = parseFloat(ecoTempValue.replace(',', '.'));
    if (isNaN(numValue)) return;
    
    const updateData: Partial<UpdateEconomicParameters> = {
      [field]: numValue,
    };
    
    updateEcoParamsMutation.mutate(updateData);
    setEcoEditingField(null);
    setEcoTempValue("");
  };

  const handleEcoCancel = () => {
    setEcoEditingField(null);
    setEcoTempValue("");
  };

  // Generate all days for the month
  const daysInMonth = new Date(selectedYear, selectedMonth, 0).getDate();
  const monthDays = Array.from({ length: daysInMonth }, (_, i) => i + 1);

  // Convert budget entries to map for easier lookup
  const budgetMap = useMemo(() => {
    const map = new Map<number, BudgetEntry>();
    if (budgetEntries && Array.isArray(budgetEntries)) {
      budgetEntries.forEach(entry => {
        map.set(entry.day, entry);
      });
    }
    return map;
  }, [budgetEntries]);

  // Calculate totals
  const totals = useMemo(() => {
    let totalCopertoMedio = 0;
    let totalCoperti = 0;
    let totalBudgetRevenue = 0;
    let totalBudgetDelivery = 0;
    let totalActualRevenue = 0;
    let totalActualDelivery = 0;
    let validEntries = 0;

    if (budgetEntries && Array.isArray(budgetEntries)) {
      budgetEntries.forEach(entry => {
        totalCoperti += entry.coperti || 0;
        totalBudgetDelivery += entry.budgetDelivery || 0;
        totalActualRevenue += entry.actualRevenue || 0;
        totalActualDelivery += entry.actualDelivery || 0;
        
        if (entry.copertoMedio && entry.copertoMedio > 0) {
          totalCopertoMedio += entry.copertoMedio;
          validEntries++;
        }
        
        // Budget Revenue calcolato = Coperti * Coperto Medio
        const calculatedRevenue = (entry.coperti || 0) * (entry.copertoMedio || 0);
        totalBudgetRevenue += calculatedRevenue;
      });
    }

    // Media coperto medio
    const avgCopertoMedio = validEntries > 0 ? totalCopertoMedio / validEntries : 0;
    
    // Consuntivo 2026 = Budget Revenue + Budget Delivery
    const totalConsuntivo2026 = totalBudgetRevenue + totalBudgetDelivery;
    
    // Consuntivo 2025 = Incasso 2025 + Delivery 2025
    const totalConsuntivo2025 = totalActualRevenue + totalActualDelivery;
    
    // Delta % tra Consuntivo 2026 e 2025
    const deltaPercentage = totalConsuntivo2025 > 0 ? 
      (((totalConsuntivo2026 - totalConsuntivo2025) / totalConsuntivo2025) * 100) : 0;

    return {
      avgCopertoMedio,
      totalCoperti,
      totalBudgetRevenue,
      totalBudgetDelivery,
      totalBudget: totalBudgetRevenue + totalBudgetDelivery,
      totalActualRevenue,
      totalActualDelivery,
      totalActual: totalActualRevenue + totalActualDelivery,
      totalConsuntivo2026,
      totalConsuntivo2025,
      deltaPercentage
    };
  }, [budgetEntries]);

  const monthNames = [
    "Gennaio", "Febbraio", "Marzo", "Aprile", "Maggio", "Giugno",
    "Luglio", "Agosto", "Settembre", "Ottobre", "Novembre", "Dicembre"
  ];

  const dayNames = [
    "Dom", "Lun", "Mar", "Mer", "Gio", "Ven", "Sab"
  ];

  const getDayOfWeek = (year: number, month: number, day: number) => {
    const date = new Date(year, month - 1, day);
    return dayNames[date.getDay()];
  };

  const formatCurrency = (value: number | null | undefined) => {
    if (value === null || value === undefined) return "€ 0,00";
    return `€ ${value.toLocaleString('it-IT', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
  };

  const formatPercentage = (value: number | null | undefined) => {
    if (value === null || value === undefined) return "0%";
    return `${value.toFixed(1)}%`;
  };

  const getPercentageColor = (value: number | null | undefined) => {
    if (!value) return "";
    if (value > 0) return "text-green-600"; // Positivo = verde
    if (value < 0) return "text-red-600"; // Negativo = rosso  
    return "text-gray-600";
  };

  const handleCellEdit = (day: number, field: keyof UpdateBudgetEntry, value: string) => {
    const entry = budgetMap.get(day);
    
    // Handle empty values and convert italian decimal format (comma to dot)
    let numericValue: number;
    if (value === '' || value === null || value === undefined) {
      numericValue = 0;
    } else {
      // Support both comma and dot as decimal separator
      const cleanValue = value.replace(',', '.');
      numericValue = parseFloat(cleanValue);
      if (isNaN(numericValue)) {
        numericValue = 0;
      }
      
      // Special handling for integer fields (coperti should be integer)
      if (field === 'coperti') {
        numericValue = Math.round(numericValue); // Convert decimals to integers for coperti
      }
    }

    if (entry) {
      // Update existing entry
      updateMutation.mutate({
        id: entry.id,
        data: { [field]: numericValue }
      });
    } else {
      // Create new entry
      const dateStr = `${selectedYear}-${selectedMonth.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;
      createMutation.mutate({
        date: dateStr,
        year: selectedYear,
        month: selectedMonth,
        day: day,
        [field]: numericValue
      });
    }
  };

  if (isLoading) {
    return <div className="flex justify-center p-8">Caricamento...</div>;
  }

  return (
    <div className="space-y-6" data-testid="budget-main">
      {/* Header */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <Calendar className="h-5 w-5 text-primary" />
              <CardTitle>Budget {monthNames[selectedMonth - 1]} {selectedYear}</CardTitle>
            </div>
            <div className="flex items-center gap-3">
              <Select value={selectedYear.toString()} onValueChange={(value) => setSelectedYear(parseInt(value))}>
                <SelectTrigger className="w-24" data-testid="select-year">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="2024">2024</SelectItem>
                  <SelectItem value="2025">2025</SelectItem>
                  <SelectItem value="2026">2026</SelectItem>
                  <SelectItem value="2027">2027</SelectItem>
                </SelectContent>
              </Select>
              <Select value={selectedMonth.toString()} onValueChange={(value) => setSelectedMonth(parseInt(value))}>
                <SelectTrigger className="w-32" data-testid="select-month">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {monthNames.map((name, index) => (
                    <SelectItem key={index} value={(index + 1).toString()}>{name}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>
        </CardHeader>
      </Card>

      {/* Budget Table */}
      <Card>
        <CardContent className="p-0">
          <div className="overflow-x-auto">
            <Table>
              <TableHeader>
                <TableRow className="bg-red-600 text-white hover:bg-red-600">
                  <TableHead className="text-white font-semibold min-w-[120px]">Data</TableHead>
                  <TableHead className="text-white font-semibold text-right min-w-[100px]">Coperto Medio €</TableHead>
                  <TableHead className="text-white font-semibold text-center min-w-[80px]">Coperti</TableHead>
                  <TableHead className="text-white font-semibold text-right min-w-[120px]">Budget {selectedYear} €</TableHead>
                  <TableHead className="text-white font-semibold text-right min-w-[120px]">Delivery {selectedYear} €</TableHead>
                  <TableHead className="text-white font-semibold text-right min-w-[120px]">Incasso {selectedYear - 1} €</TableHead>
                  <TableHead className="text-white font-semibold text-right min-w-[120px]">Delivery {selectedYear - 1} €</TableHead>
                  <TableHead className="text-white font-semibold text-center min-w-[110px]">Consuntivo {selectedYear}</TableHead>
                  <TableHead className="text-white font-semibold text-center min-w-[110px]">Consuntivo {selectedYear - 1}</TableHead>
                  <TableHead className="text-white font-semibold text-center min-w-[80px]">Delta %</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {monthDays.map(day => {
                  const entry = budgetMap.get(day);
                  
                  // Calcolo automatico Budget 2026 = Coperti * Coperto Medio
                  const calculatedBudgetRevenue = (entry?.coperti || 0) * (entry?.copertoMedio || 0);
                  
                  // Consuntivo 2026 = Budget 2026 + Delivery 2026
                  const consuntivo2026 = calculatedBudgetRevenue + (entry?.budgetDelivery || 0);
                  
                  // Consuntivo 2025 = Incasso 2025 + Delivery 2025
                  const consuntivo2025 = (entry?.actualRevenue || 0) + (entry?.actualDelivery || 0);
                  
                  // Delta % tra Consuntivo 2026 e Consuntivo 2025
                  const deltaPercentage = consuntivo2025 > 0 ? (((consuntivo2026 - consuntivo2025) / consuntivo2025) * 100) : 0;

                  return (
                    <TableRow 
                      key={day}
                      className="hover:bg-muted/50 transition-colors"
                    >
                      <TableCell className="font-medium">
                        {`${getDayOfWeek(selectedYear, selectedMonth, day)} ${day.toString().padStart(2, '0')} ${monthNames[selectedMonth - 1].slice(0, 3)} ${selectedYear}`}
                      </TableCell>
                      <TableCell className="text-right">
                        <Input
                          type="text"
                          value={entry?.copertoMedio ? entry.copertoMedio.toString() : ''}
                          placeholder="0,00"
                          className="w-20 text-right border-0 p-1 h-8"
                          onChange={(e) => handleCellEdit(day, 'copertoMedio', e.target.value)}
                          data-testid={`input-coperto-medio-${day}`}
                        />
                      </TableCell>
                      <TableCell className="text-center">
                        <Input
                          type="text"
                          value={entry?.coperti ? entry.coperti.toString() : ''}
                          placeholder="0"
                          className="w-16 text-center border-0 p-1 h-8"
                          onChange={(e) => handleCellEdit(day, 'coperti', e.target.value)}
                          data-testid={`input-coperti-${day}`}
                        />
                      </TableCell>
                      <TableCell className="text-right">
                        <span className="text-sm font-mono" data-testid={`calculated-budget-revenue-${day}`}>
                          {formatCurrency(calculatedBudgetRevenue)}
                        </span>
                      </TableCell>
                      <TableCell className="text-right">
                        <Input
                          type="text"
                          value={entry?.budgetDelivery ? entry.budgetDelivery.toString() : ''}
                          placeholder="0,00"
                          className="w-24 text-right border-0 p-1 h-8"
                          onChange={(e) => handleCellEdit(day, 'budgetDelivery', e.target.value)}
                          data-testid={`input-budget-delivery-${day}`}
                        />
                      </TableCell>
                      <TableCell className="text-right">
                        <Input
                          type="text"
                          value={entry?.actualRevenue ? entry.actualRevenue.toString() : ''}
                          placeholder="0,00"
                          className="w-24 text-right border-0 p-1 h-8"
                          onChange={(e) => handleCellEdit(day, 'actualRevenue', e.target.value)}
                          data-testid={`input-actual-revenue-${day}`}
                        />
                      </TableCell>
                      <TableCell className="text-right">
                        <Input
                          type="text"
                          value={entry?.actualDelivery ? entry.actualDelivery.toString() : ''}
                          placeholder="0,00"
                          className="w-24 text-right border-0 p-1 h-8"
                          onChange={(e) => handleCellEdit(day, 'actualDelivery', e.target.value)}
                          data-testid={`input-actual-delivery-${day}`}
                        />
                      </TableCell>
                      <TableCell className="text-center">
                        <span className="text-sm font-mono" data-testid={`consuntivo-2026-${day}`}>
                          {formatCurrency(consuntivo2026)}
                        </span>
                      </TableCell>
                      <TableCell className="text-center">
                        <span className="text-sm font-mono" data-testid={`consuntivo-2025-${day}`}>
                          {formatCurrency(consuntivo2025)}
                        </span>
                      </TableCell>
                      <TableCell className="text-center">
                        <Badge 
                          variant="secondary"
                          className={`font-mono text-xs ${getPercentageColor(deltaPercentage)}`}
                          data-testid={`badge-delta-${day}`}
                        >
                          {deltaPercentage > 0 ? '+' : ''}{deltaPercentage.toFixed(1)}%
                        </Badge>
                      </TableCell>
                    </TableRow>
                  );
                })}

                {/* Totals Row */}
                <TableRow className="bg-gray-100 dark:bg-gray-800 font-semibold border-t-2">
                  <TableCell className="font-bold">Totale {monthNames[selectedMonth - 1]}</TableCell>
                  <TableCell className="text-right font-bold" data-testid="total-coperto-medio">{formatCurrency(totals.avgCopertoMedio)}</TableCell>
                  <TableCell className="text-center font-bold" data-testid="total-coperti">{totals.totalCoperti}</TableCell>
                  <TableCell className="text-right font-bold" data-testid="total-budget-revenue">{formatCurrency(totals.totalBudgetRevenue)}</TableCell>
                  <TableCell className="text-right font-bold" data-testid="total-budget-delivery">{formatCurrency(totals.totalBudgetDelivery)}</TableCell>
                  <TableCell className="text-right font-bold" data-testid="total-actual-revenue">{formatCurrency(totals.totalActualRevenue)}</TableCell>
                  <TableCell className="text-right font-bold" data-testid="total-actual-delivery">{formatCurrency(totals.totalActualDelivery)}</TableCell>
                  <TableCell className="text-center font-bold" data-testid="total-consuntivo-2026">{formatCurrency(totals.totalConsuntivo2026)}</TableCell>
                  <TableCell className="text-center font-bold" data-testid="total-consuntivo-2025">{formatCurrency(totals.totalConsuntivo2025)}</TableCell>
                  <TableCell className="text-center font-bold">
                    <Badge 
                      variant="secondary"
                      className={`font-mono ${getPercentageColor(totals.deltaPercentage)}`}
                      data-testid="total-delta-percentage"
                    >
                      {totals.deltaPercentage > 0 ? '+' : ''}{totals.deltaPercentage.toFixed(1)}%
                    </Badge>
                  </TableCell>
                </TableRow>
              </TableBody>
            </Table>
          </div>
        </CardContent>
      </Card>

      {/* Summary Cards */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-medium text-muted-foreground">Consuntivo {selectedYear}</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold" data-testid="summary-card-consuntivo-2026">
              {formatCurrency(totals.totalConsuntivo2026)}
            </div>
            <p className="text-xs text-muted-foreground mt-1">
              Sala: {formatCurrency(totals.totalBudgetRevenue)} | Delivery: {formatCurrency(totals.totalBudgetDelivery)}
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-medium text-muted-foreground">Consuntivo {selectedYear - 1}</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold" data-testid="summary-card-consuntivo-2025">
              {formatCurrency(totals.totalConsuntivo2025)}
            </div>
            <p className="text-xs text-muted-foreground mt-1">
              Sala: {formatCurrency(totals.totalActualRevenue)} | Delivery: {formatCurrency(totals.totalActualDelivery)}
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-medium text-muted-foreground">Performance</CardTitle>
          </CardHeader>
          <CardContent>
            <div className={`text-2xl font-bold ${getPercentageColor(totals.deltaPercentage)}`} data-testid="summary-card-performance">
              {totals.deltaPercentage > 0 ? '+' : ''}{totals.deltaPercentage.toFixed(1)}%
            </div>
            <p className="text-xs text-muted-foreground mt-1">
              {selectedYear} vs {selectedYear - 1}
            </p>
          </CardContent>
        </Card>
      </div>

      {/* Conto Economico Section */}
      {ecoParams && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <TrendingUp className="h-5 w-5 text-primary" />
              Conto Economico {monthNames[selectedMonth - 1]} {selectedYear}
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                
                {/* Sezione Ricavi */}
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold text-foreground border-b pb-2">Ricavi</h3>
                  <div className="space-y-3">
                    <div className="flex justify-between items-center bg-muted/50 p-3 rounded-md">
                      <span className="font-medium">Ricavi Sala:</span>
                      <span className="font-mono font-bold text-chart-2">{formatCurrency(totals.totalBudgetRevenue)}</span>
                    </div>
                    <div className="flex justify-between items-center bg-muted/50 p-3 rounded-md">
                      <span className="font-medium">Ricavi Delivery:</span>
                      <span className="font-mono font-bold text-chart-2">{formatCurrency(totals.totalBudgetDelivery)}</span>
                    </div>
                    <div className="flex justify-between items-center bg-primary/10 p-3 rounded-md border-2 border-primary/20">
                      <span className="font-bold text-lg">RICAVI TOTALI:</span>
                      <span className="font-mono font-bold text-xl text-primary">{formatCurrency(totals.totalConsuntivo2026)}</span>
                    </div>
                  </div>
                </div>

                {/* Sezione Costi */}
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold text-foreground border-b pb-2">Costi</h3>
                  <div className="space-y-3">
                    {/* Materie Prime */}
                    <div className="flex justify-between items-center bg-muted/50 p-3 rounded-md">
                      <div className="flex items-center gap-2">
                        <span className="font-medium">Materie Prime:</span>
                        <div className="flex items-center gap-1">
                          {ecoEditingField === 'materieFirstePercent' ? (
                            <div className="flex items-center gap-1">
                              <Input
                                type="text"
                                value={ecoTempValue}
                                onChange={(e) => setEcoTempValue(e.target.value)}
                                className="w-16 h-6 text-xs text-center bg-yellow-100 dark:bg-yellow-900/30"
                                placeholder="22,10"
                              />
                              <span className="text-xs">%</span>
                              <Button size="sm" variant="ghost" className="h-6 w-6 p-0" onClick={() => handleEcoSave('materieFirstePercent')}>
                                <Save className="h-3 w-3" />
                              </Button>
                              <Button size="sm" variant="ghost" className="h-6 w-6 p-0" onClick={handleEcoCancel}>
                                <X className="h-3 w-3" />
                              </Button>
                            </div>
                          ) : (
                            <Button
                              variant="ghost"
                              size="sm"
                              className="h-6 px-2 text-xs bg-yellow-100 dark:bg-yellow-900/30 hover:bg-yellow-200 dark:hover:bg-yellow-900/50"
                              onClick={() => handleEcoEdit('materieFirstePercent', ecoParams.materieFirstePercent, true)}
                            >
                              {ecoParams.materieFirstePercent.toFixed(2).replace('.', ',')}%
                            </Button>
                          )}
                        </div>
                      </div>
                      <span className="font-mono font-medium text-destructive">
                        -{formatCurrency((totals.totalConsuntivo2026 * ecoParams.materieFirstePercent) / 100)}
                      </span>
                    </div>

                    {/* Acquisti Vari */}
                    <div className="flex justify-between items-center bg-muted/50 p-3 rounded-md">
                      <div className="flex items-center gap-2">
                        <span className="font-medium">Acquisti Vari:</span>
                        <div className="flex items-center gap-1">
                          {ecoEditingField === 'acquistiVarPercent' ? (
                            <div className="flex items-center gap-1">
                              <Input
                                type="text"
                                value={ecoTempValue}
                                onChange={(e) => setEcoTempValue(e.target.value)}
                                className="w-16 h-6 text-xs text-center bg-yellow-100 dark:bg-yellow-900/30"
                                placeholder="3,00"
                              />
                              <span className="text-xs">%</span>
                              <Button size="sm" variant="ghost" className="h-6 w-6 p-0" onClick={() => handleEcoSave('acquistiVarPercent')}>
                                <Save className="h-3 w-3" />
                              </Button>
                              <Button size="sm" variant="ghost" className="h-6 w-6 p-0" onClick={handleEcoCancel}>
                                <X className="h-3 w-3" />
                              </Button>
                            </div>
                          ) : (
                            <Button
                              variant="ghost"
                              size="sm"
                              className="h-6 px-2 text-xs bg-yellow-100 dark:bg-yellow-900/30 hover:bg-yellow-200 dark:hover:bg-yellow-900/50"
                              onClick={() => handleEcoEdit('acquistiVarPercent', ecoParams.acquistiVarPercent, true)}
                            >
                              {ecoParams.acquistiVarPercent.toFixed(2).replace('.', ',')}%
                            </Button>
                          )}
                        </div>
                      </div>
                      <span className="font-mono font-medium text-destructive">
                        -{formatCurrency((totals.totalConsuntivo2026 * ecoParams.acquistiVarPercent) / 100)}
                      </span>
                    </div>

                    {/* Costi Fissi */}
                    <div className="space-y-2">
                      <h4 className="text-sm font-semibold text-muted-foreground mt-4">Costi Fissi</h4>
                      
                      {/* Locazioni */}
                      <div className="flex justify-between items-center bg-muted/30 p-2 rounded-sm">
                        <span className="text-sm">Locazioni:</span>
                        <div className="flex items-center gap-2">
                          {ecoEditingField === 'locazioniBudget' ? (
                            <div className="flex items-center gap-1">
                              <Input
                                type="text"
                                value={ecoTempValue}
                                onChange={(e) => setEcoTempValue(e.target.value)}
                                className="w-20 h-6 text-xs text-right bg-yellow-100 dark:bg-yellow-900/30"
                                placeholder="0,00"
                              />
                              <Button size="sm" variant="ghost" className="h-6 w-6 p-0" onClick={() => handleEcoSave('locazioniBudget')}>
                                <Save className="h-3 w-3" />
                              </Button>
                              <Button size="sm" variant="ghost" className="h-6 w-6 p-0" onClick={handleEcoCancel}>
                                <X className="h-3 w-3" />
                              </Button>
                            </div>
                          ) : (
                            <Button
                              variant="ghost"
                              size="sm"
                              className="h-6 px-2 text-xs bg-yellow-100 dark:bg-yellow-900/30 hover:bg-yellow-200 dark:hover:bg-yellow-900/50"
                              onClick={() => handleEcoEdit('locazioniBudget', ecoParams.locazioniBudget)}
                            >
                              {formatCurrency(ecoParams.locazioniBudget)}
                            </Button>
                          )}
                        </div>
                      </div>

                      {/* Personale */}
                      <div className="flex justify-between items-center bg-muted/30 p-2 rounded-sm">
                        <span className="text-sm">Personale:</span>
                        <div className="flex items-center gap-2">
                          {ecoEditingField === 'personaleBudget' ? (
                            <div className="flex items-center gap-1">
                              <Input
                                type="text"
                                value={ecoTempValue}
                                onChange={(e) => setEcoTempValue(e.target.value)}
                                className="w-20 h-6 text-xs text-right bg-yellow-100 dark:bg-yellow-900/30"
                                placeholder="0,00"
                              />
                              <Button size="sm" variant="ghost" className="h-6 w-6 p-0" onClick={() => handleEcoSave('personaleBudget')}>
                                <Save className="h-3 w-3" />
                              </Button>
                              <Button size="sm" variant="ghost" className="h-6 w-6 p-0" onClick={handleEcoCancel}>
                                <X className="h-3 w-3" />
                              </Button>
                            </div>
                          ) : (
                            <Button
                              variant="ghost"
                              size="sm"
                              className="h-6 px-2 text-xs bg-yellow-100 dark:bg-yellow-900/30 hover:bg-yellow-200 dark:hover:bg-yellow-900/50"
                              onClick={() => handleEcoEdit('personaleBudget', ecoParams.personaleBudget)}
                            >
                              {formatCurrency(ecoParams.personaleBudget)}
                            </Button>
                          )}
                        </div>
                      </div>

                      {/* Altri Costi Fissi */}
                      <div className="grid grid-cols-2 gap-2 text-xs">
                        {[
                          { field: 'utenzeBudget' as const, label: 'Utenze' },
                          { field: 'manutenzionibudget' as const, label: 'Manutenzioni' },
                          { field: 'noleggibudget' as const, label: 'Noleggi' },
                          { field: 'prestazioniTerziBudget' as const, label: 'Prestazioni Terzi' },
                          { field: 'consulenzeBudget' as const, label: 'Consulenze' },
                          { field: 'marketingBudget' as const, label: 'Marketing' },
                          { field: 'deliveryBudget' as const, label: 'Delivery' },
                          { field: 'trasferteBudget' as const, label: 'Trasferte' },
                          { field: 'assicurazioniBudget' as const, label: 'Assicurazioni' },
                          { field: 'speseBancarieBudget' as const, label: 'Spese Bancarie' },
                        ].map(({ field, label }) => (
                          <div key={field} className="flex justify-between items-center bg-muted/20 p-1 rounded-sm">
                            <span className="text-xs">{label}:</span>
                            <div className="flex items-center gap-1">
                              {ecoEditingField === field ? (
                                <div className="flex items-center gap-1">
                                  <Input
                                    type="text"
                                    value={ecoTempValue}
                                    onChange={(e) => setEcoTempValue(e.target.value)}
                                    className="w-16 h-5 text-xs text-right bg-yellow-100 dark:bg-yellow-900/30"
                                    placeholder="0,00"
                                  />
                                  <Button size="sm" variant="ghost" className="h-5 w-5 p-0" onClick={() => handleEcoSave(field)}>
                                    <Save className="h-2 w-2" />
                                  </Button>
                                  <Button size="sm" variant="ghost" className="h-5 w-5 p-0" onClick={handleEcoCancel}>
                                    <X className="h-2 w-2" />
                                  </Button>
                                </div>
                              ) : (
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  className="h-5 px-1 text-xs bg-yellow-100 dark:bg-yellow-900/30 hover:bg-yellow-200 dark:hover:bg-yellow-900/50"
                                  onClick={() => handleEcoEdit(field, ecoParams[field])}
                                >
                                  {formatCurrency(ecoParams[field])}
                                </Button>
                              )}
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              {/* Calcoli Finali */}
              <div className="mt-6 space-y-4 border-t pt-4">
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div className="bg-chart-2/10 p-4 rounded-md">
                    <h4 className="font-semibold text-chart-2 mb-2">Ricavi Totali</h4>
                    <div className="text-2xl font-bold text-chart-2">{formatCurrency(totals.totalConsuntivo2026)}</div>
                  </div>
                  
                  <div className="bg-destructive/10 p-4 rounded-md">
                    <h4 className="font-semibold text-destructive mb-2">Costi Totali</h4>
                    <div className="text-2xl font-bold text-destructive">
                      {formatCurrency(
                        (totals.totalConsuntivo2026 * (ecoParams.materieFirstePercent + ecoParams.acquistiVarPercent)) / 100 +
                        ecoParams.locazioniBudget + ecoParams.personaleBudget + ecoParams.utenzeBudget +
                        ecoParams.manutenzionibudget + ecoParams.noleggibudget + ecoParams.prestazioniTerziBudget +
                        ecoParams.consulenzeBudget + ecoParams.marketingBudget + ecoParams.deliveryBudget +
                        ecoParams.trasferteBudget + ecoParams.assicurazioniBudget + ecoParams.speseBancarieBudget
                      )}
                    </div>
                  </div>

                  <div className="bg-primary/10 p-4 rounded-md border-2 border-primary/20">
                    <h4 className="font-semibold text-primary mb-2">Risultato Operativo</h4>
                    <div className={`text-2xl font-bold ${
                      (totals.totalConsuntivo2026 - 
                       (totals.totalConsuntivo2026 * (ecoParams.materieFirstePercent + ecoParams.acquistiVarPercent)) / 100 -
                       ecoParams.locazioniBudget - ecoParams.personaleBudget - ecoParams.utenzeBudget -
                       ecoParams.manutenzionibudget - ecoParams.noleggibudget - ecoParams.prestazioniTerziBudget -
                       ecoParams.consulenzeBudget - ecoParams.marketingBudget - ecoParams.deliveryBudget -
                       ecoParams.trasferteBudget - ecoParams.assicurazioniBudget - ecoParams.speseBancarieBudget) >= 0 
                       ? 'text-chart-2' : 'text-destructive'
                    }`}>
                      {formatCurrency(
                        totals.totalConsuntivo2026 - 
                        (totals.totalConsuntivo2026 * (ecoParams.materieFirstePercent + ecoParams.acquistiVarPercent)) / 100 -
                        ecoParams.locazioniBudget - ecoParams.personaleBudget - ecoParams.utenzeBudget -
                        ecoParams.manutenzionibudget - ecoParams.noleggibudget - ecoParams.prestazioniTerziBudget -
                        ecoParams.consulenzeBudget - ecoParams.marketingBudget - ecoParams.deliveryBudget -
                        ecoParams.trasferteBudget - ecoParams.assicurazioniBudget - ecoParams.speseBancarieBudget
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}

=====================================================
=== 2. RECIPE FORM COMPONENT ===
=====================================================

// File: client/src/components/RecipeForm.tsx
${JSON.stringify(require('./client/src/components/RecipeForm.tsx'), null, 2)}

=====================================================
=== 3. SALES CHART COMPONENT ===
=====================================================

// File: client/src/components/SalesChart.tsx
${JSON.stringify(require('./client/src/components/SalesChart.tsx'), null, 2)}

=====================================================
=== 4. WASTE FORM COMPONENT ===
=====================================================

// File: client/src/components/WasteForm.tsx
${JSON.stringify(require('./client/src/components/WasteForm.tsx'), null, 2)}

=====================================================
=== 5. QUERY CLIENT UTILITY ===
=====================================================

// File: client/src/lib/queryClient.ts
import { QueryClient, QueryFunction } from "@tanstack/react-query";

async function throwIfResNotOk(res: Response) {
  if (!res.ok) {
    const text = (await res.text()) || res.statusText;
    throw new Error(`${res.status}: ${text}`);
  }
}

export async function apiRequest(
  method: string,
  url: string,
  data?: unknown | undefined,
): Promise<Response> {
  const res = await fetch(url, {
    method,
    headers: data ? { "Content-Type": "application/json" } : {},
    body: data ? JSON.stringify(data) : undefined,
    credentials: "include",
  });

  await throwIfResNotOk(res);
  return res;
}

type UnauthorizedBehavior = "returnNull" | "throw";
export const getQueryFn: <T>(options: {
  on401: UnauthorizedBehavior;
}) => QueryFunction<T> =
  ({ on401: unauthorizedBehavior }) =>
  async ({ queryKey }) => {
    const res = await fetch(queryKey.join("/") as string, {
      credentials: "include",
    });

    if (unauthorizedBehavior === "returnNull" && res.status === 401) {
      return null;
    }

    await throwIfResNotOk(res);
    return await res.json();
  };

export const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      queryFn: getQueryFn({ on401: "throw" }),
      refetchInterval: false,
      refetchOnWindowFocus: false,
      staleTime: Infinity,
      retry: false,
    },
    mutations: {
      retry: false,
    },
  },
});

=====================================================
=== FINE FILE COMPLETO ===
=====================================================

Versione: React 18 + TypeScript
Stack: Vite + Express.js + PostgreSQL + Drizzle ORM
UI: Tailwind CSS + shadcn/ui + Radix UI
Data Fetching: TanStack Query (React Query v5)
Validazione: Zod + React Hook Form
Caratteristiche: Evidenziazione campi editabili con bg-yellow-100
Data: 19 Settembre 2025